@model MyWebSite.Models.FileUploadVm
@{
    ViewData["Title"] = "Dosya Yükleme";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}
<br />
<title>Dosya Yükleme</title>
<h4 class="card-title">Dosya Yükleme</h4>
<hr />
<div class="row">
    <div class="col-lg-8">
        <div class="card shadow-sm">
            <div class="card-body">
                <div id="serverSummary" class="alert alert-danger d-none"></div>
                <form id="uploadForm"
                      asp-action="Yukle"
                      asp-controller="AdminDosya"
                      method="post"
                      enctype="multipart/form-data"
                      class="row g-3 needs-validation"
                      novalidate>
                    @Html.AntiForgeryToken()
                    <div class="col-md-6">
                        <label class="form-label">Paket <span class="text-danger">*</span></label>
                        <input asp-for="PackageKey" name="PackageKey" class="form-control" required />
                        <div class="invalid-feedback">Zorunlu.</div>
                        <div class="text-danger small field-error d-none" data-for="PackageKey"></div>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Versiyon</label>
                        <input asp-for="Version"
                               name="Version"
                               class="form-control"
                               placeholder="örn: 1.0.0"
                               pattern="^\d+\.\d+\.\d+$"
                               title="Biçim: 1.0.0" />
                        <div class="text-muted small">Biçim: <code>1.0.0</code></div>
                        <div class="text-danger small field-error d-none" data-for="Version"></div>
                    </div>
                    <div class="col-md-12">
                        <label class="form-label">Arşiv (.zip/.rar) <span class="text-danger">*</span></label>
                        <input id="fileInput"
                               asp-for="Archive"
                               name="Archive"
                               type="file"
                               class="form-control"
                               accept=".zip,.rar"
                               required />
                        <div class="invalid-feedback">ZIP veya RAR seçiniz.</div>
                        <div class="text-danger small field-error d-none" data-for="Archive"></div>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">İndirme Şifresi <span class="text-danger">*</span></label>
                        <div class="input-group">
                            <input id="pwdInput"
                                   asp-for="DownloadPasswordPlain"
                                   name="DownloadPasswordPlain"
                                   type="password"
                                   class="form-control"
                                   required
                                   minlength="6" />
                            <button type="button" class="btn btn-outline-secondary" id="togglePwd" title="Göster/Gizle">
                                <i class="bi bi-eye"></i>
                            </button>
                        </div>
                        <div class="form-text">Şifre zorunludur (indirme sırasında doğrulanır). En az 6 karakter.</div>
                        <div class="invalid-feedback">Zorunlu ve en az 6 karakter.</div>
                        <div class="text-danger small field-error d-none" data-for="DownloadPasswordPlain"></div>
                    </div>
                    <div class="col-12 d-flex gap-2">
                        <button id="btnUpload" class="btn btn-primary" type="submit">
                            <i class="bi bi-cloud-upload"></i> Yükle
                        </button>
                        <a asp-action="Liste" asp-controller="AdminDosya" class="btn btn-outline-secondary">
                            <i class="bi bi-arrow-left"></i> Listeye Dön
                        </a>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="col-lg-4">
        <div id="tempDataMessages"
             data-type="@TempData["Type"]"
             data-message="@TempData["Message"]">
        </div>
    </div>
</div>
<div class="modal fade" id="uploadModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow-lg">
            <div class="modal-header py-2">
                <h6 class="modal-title" id="uploadTitle"><i class="bi bi-cloud-upload"></i> Yükleme Başladı</h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Kapat" id="btnCloseModal" disabled></button>
            </div>
            <div class="modal-body">
                <div class="d-flex align-items-center mb-2">
                    <div class="flex-grow-1">
                        <div class="small text-muted">Dosya</div>
                        <div id="uploadFileName" class="fw-semibold text-truncate">Seçilmedi</div>
                    </div>
                    <div class="ms-3 text-end">
                        <div class="small text-muted">Durum</div>
                        <div id="uploadPct" class="fw-semibold">0%</div>
                    </div>
                </div>
                <div class="progress mb-2" role="progressbar" aria-valuemin="0" aria-valuemax="100">
                    <div id="uploadBar" class="progress-bar progress-bar-striped progress-bar-animated" style="width:0%"></div>
                </div>
                <div class="small text-muted" id="uploadStatus">Hazırlanıyor...</div>
                <div id="uploadDone" class="d-none text-center mt-3">
                    <div class="display-6"><i class="bi bi-check-circle"></i></div>
                    <div class="fw-semibold">Yükleme tamamlandı</div>
                    <div class="text-muted small">Dosya başarıyla kaydedildi.</div>
                    <div class="mt-3 d-flex justify-content-center gap-2">
                        <a href="@Url.Action("Liste", "AdminDosya")" class="btn btn-success">
                            <i class="bi bi-list-ul"></i> Listeye Dön
                        </a>
                        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Kapat</button>
                    </div>
                </div>

            </div>
        </div>
    </div>
</div>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    (function () {
      const form = document.getElementById('uploadForm');
      const btnUpload = document.getElementById('btnUpload');
      const pwd = document.getElementById('pwdInput');
      const togglePwd = document.getElementById('togglePwd');
      const bar = document.getElementById('uploadBar');
      const pctEl = document.getElementById('uploadPct');
      const statusEl = document.getElementById('uploadStatus');
      const titleEl = document.getElementById('uploadTitle');
      const fileNameEl = document.getElementById('uploadFileName');
      const doneEl = document.getElementById('uploadDone');
      const closeBtn = document.getElementById('btnCloseModal');
      const fileInput = document.getElementById('fileInput');
      const summary = document.getElementById('serverSummary');
      (function(){
        const el = document.getElementById('tempDataMessages');
        if (!el) return;
        const type = el.getAttribute('data-type');
        const message = el.getAttribute('data-message');
        if (type && message) {
          Swal.fire({
            icon: type === "success" ? "success" : "error",
            title: type === "success" ? "Başarılı!" : "Hata!",
            text: message,
            timer: 3000, showConfirmButton: false
          });
        }
      })();
      togglePwd?.addEventListener('click', function(){
        const show = pwd.type === 'password';
        pwd.type = show ? 'text' : 'password';
        this.innerHTML = show ? '<i class="bi bi-eye-slash"></i>' : '<i class="bi bi-eye"></i>';
        this.setAttribute('aria-pressed', show ? 'true' : 'false');
      });
      let modal;
      document.addEventListener('DOMContentLoaded', () => {
        const m = document.getElementById('uploadModal');
        if (m && window.bootstrap) modal = new bootstrap.Modal(m, { backdrop: 'static', keyboard: false });
      });
      function clearServerErrors(){
        summary?.classList.add('d-none');
        summary && (summary.innerHTML = "");
        form.querySelectorAll('.field-error').forEach(el => { el.textContent = ""; el.classList.add('d-none'); });
        form.querySelectorAll('.is-invalid').forEach(el => el.classList.remove('is-invalid'));
      }
      function showFieldError(field, message){
        const input = form.querySelector(`[name="${field}"]`);
        if (input) input.classList.add('is-invalid');
        const holder = form.querySelector(`.field-error[data-for="${field}"]`);
        if (holder) { holder.textContent = message || ""; holder.classList.remove('d-none'); }
      }
      function showServerSummary(messagesArray){
        if (!summary) return;
        const items = (messagesArray || []).map(m => `<li>${m}</li>`).join("");
        summary.innerHTML = `<ul class="mb-0">${items}</ul>`;
        summary.classList.remove('d-none');
      }
      function resetModalUi(){
        titleEl.innerHTML = '<i class="bi bi-cloud-upload"></i> Yükleme Başladı';
        doneEl.classList.add('d-none');
        closeBtn.disabled = true;
        setProgress(0, 'Hazırlanıyor...');
      }
      function setProgress(pct, text){
        bar.style.width = pct + '%';
        pctEl.textContent = pct + '%';
        statusEl.textContent = text || '';
      }
      function setDoneState(){
        titleEl.innerHTML = '<i class="bi bi-check2-circle"></i> Yükleme Tamamlandı';
        bar.classList.remove('progress-bar-animated', 'progress-bar-striped');
        bar.classList.add('bg-success');
        statusEl.textContent = 'Dosya başarıyla kaydedildi.';
        doneEl.classList.remove('d-none');
        closeBtn.disabled = false;
      }
      const reSegment = /^[A-Za-z0-9._-]{1,64}$/;   
      const reVersion = /^\d+\.\d+\.\d+$/;          
      const reExt     = /\.(zip|rar)$/i;             
      function clientValidate() {
        clearServerErrors();
        let ok = true;
        const pkg = (form.querySelector('[name="PackageKey"]')?.value || '').trim();
        const ver = (form.querySelector('[name="Version"]')?.value || '').trim();
        const pwdVal = (form.querySelector('[name="DownloadPasswordPlain"]')?.value || '');
        if (!pkg || !reSegment.test(pkg)) {
          ok = false;
          showFieldError('PackageKey', 'Paket: yalnızca harf/rakam . _ - (1–64 karakter).');
        }
        if (ver && !reVersion.test(ver)) {
          ok = false;
          showFieldError('Version', 'Versiyon biçimi 1.2.3 olmalı.');
        }
        const f = fileInput?.files?.[0];
        if (!f) {
          ok = false;
          showFieldError('Archive', 'ZIP veya RAR seçiniz.');
        } else if (!reExt.test(f.name)) {
          ok = false;
          showFieldError('Archive', 'Sadece .zip veya .rar kabul edilir.');
        }
        if (!pwdVal || pwdVal.length < 6) {
          ok = false;
          showFieldError('DownloadPasswordPlain', 'Şifre en az 6 karakter olmalı.');
        }
        if (!ok) {
          showServerSummary(['Form hatalı. Alanları düzeltiniz.']);
          Swal.fire({ icon: 'error', title: 'Geçersiz form', text: 'Lütfen hatalı alanları düzeltin.', timer: 1800, showConfirmButton: false });
        }
        return ok;
      }
      form.querySelectorAll('input,select,textarea').forEach(inp => {
        inp.addEventListener('input', () => {
          inp.classList.remove('is-invalid');
          const holder = form.querySelector(`.field-error[data-for="${inp.name}"]`);
          if (holder) { holder.textContent = ""; holder.classList.add('d-none'); }
        });
      });
      form?.addEventListener('submit', function (e) {
        if (!form.checkValidity() || !clientValidate()) {
          e.preventDefault(); e.stopPropagation();
          form.classList.add('was-validated');
          return; 
        }
        e.preventDefault();
        resetModalUi();
        const fileName = fileInput?.files?.[0]?.name || 'Seçilmedi';
        fileNameEl.textContent = fileName;
        btnUpload.disabled = true;
        if (modal) modal.show();              
        setProgress(0, "Hazırlanıyor...");
        const fd = new FormData(form);
        const xhr = new XMLHttpRequest();
        xhr.open('POST', form.action, true);
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        xhr.upload.onprogress = function (evt) {
          if (evt.lengthComputable) {
            const pct = Math.round((evt.loaded / evt.total) * 100);
            setProgress(pct, pct < 100 ? "Yükleniyor..." : "Sunucu işliyor...");
          } else {
            setProgress(100, "Yükleniyor...");
          }
        };
        xhr.onreadystatechange = function () {
          if (xhr.readyState !== 4) return;
          btnUpload.disabled = false;
          if (xhr.status >= 200 && xhr.status < 300) {
            setProgress(100, "Tamamlandı");
            setDoneState();
            let redirectUrl = '@Url.Action("Liste", "AdminDosya")';
            try {
              const data = JSON.parse(xhr.responseText || "{}");
              if (data && data.ok && data.redirect) redirectUrl = data.redirect;
            } catch {}
            setTimeout(() => { window.location.href = redirectUrl; }, 1200);
            return;
          }
          if (xhr.status === 422) {
            if (modal) modal.hide();
            let data = null;
            try { data = JSON.parse(xhr.responseText); } catch {}
            const messagesForSummary = [];
            if (data) {
              if (data.errors) {
                Object.keys(data.errors).forEach(k => {
                  const arr = data.errors[k] || [];
                  if (k && k !== "") showFieldError(k, arr[0] || '');
                  else messagesForSummary.push(...arr);
                });
              }
              if (data.field && data.message) {
                showFieldError(data.field, data.message);
                messagesForSummary.push(data.message);
              }
              if (!data.errors && !data.field && data.message) {
                messagesForSummary.push(data.message);
              }
            } else {
              messagesForSummary.push('Form geçersiz. Alanları kontrol edin.');
            }
            if (messagesForSummary.length) showServerSummary(messagesForSummary);
            const firstInvalid = form.querySelector('.is-invalid');
            if (firstInvalid) firstInvalid.focus();
            Swal.fire({
              icon: 'error',
              title: 'Yükleme başarısız',
              text: 'Lütfen alanları kontrol edin.',
              timer: 2000, showConfirmButton: false
            });
            return;
          }
          if (modal) modal.hide();
          Swal.fire({
            icon: 'error',
            title: 'Yükleme başarısız',
            text: 'Sunucu yüklemeyi kabul etmedi.',
            showConfirmButton: true
          });
        };
        xhr.onerror = function(){
          btnUpload.disabled = false;
          if (modal) modal.hide();
          Swal.fire({
            icon: 'error',
            title: 'Ağ Hatası',
            text: 'Bağlantı kesildi veya sunucuya ulaşılamadı.',
            showConfirmButton: true
          });
        };
        xhr.send(fd);
      });
    })();
</script>