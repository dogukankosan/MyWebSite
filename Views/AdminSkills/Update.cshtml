@model Skills
@{
    ViewData["Title"] = "Admin Beceri Güncelle";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}
<form id="skillUpdateForm" method="post" autocomplete="off">
    <input type="hidden" value="@Model.ID" name="ID" />
    <br />
    <h4>Beceri Güncelleme Sayfası</h4>
    <hr />
    <div class="form-group">
        <label for="SkillName">Beceri Adı:</label>
        <input type="text" class="form-control" name="SkillName" id="SkillName"
               value="@Model.SkillName" minlength="3" maxlength="50" required />
        <span id="SkillNameError" class="text-danger" style="margin-top: 5px; display: block;"></span>
    </div>
    <br />
    <div class="form-group">
        <label for="SkillPercent">Beceri Yüzde %:</label>
        <input type="number" class="form-control" name="SkillPercent" id="SkillPercent"
               value="@Model.SkillPercent" min="1" max="100" required />
        <span id="SkillPercentError" class="text-danger" style="margin-top: 5px; display: block;"></span>
    </div>
    <br />
    <div class="form-group">
        @await Component.InvokeAsync("IconSelect", new { selected = Model.Skillcon })
        <span id="SkillIconError" class="text-danger" style="margin-top: 5px; display: block;"></span>
    </div>
    <br />
    <button type="submit" class="btn btn-primary">Güncelle</button>
</form>
<br />
<div id="resultsucc" class="mt-3"></div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const select = document.getElementById("Skillcon");
        const wrapper = document.getElementById("iconPreviewWrapper");
        const form = document.getElementById("skillUpdateForm");
        function renderIcon(iconClass) {
            wrapper.replaceChildren();
            const icon = document.createElement("i");
            icon.className = iconClass.includes("fa-3x") ? iconClass + " mt-2" : iconClass + " fa-3x mt-2";
            wrapper.appendChild(icon);
        }
        if (select && wrapper) {
            renderIcon(select.value); 
            select.addEventListener("change", function () {
                renderIcon(this.value);
            });
        } else {
            console.warn("Skillcon veya iconPreviewWrapper bulunamadı!");
        }
        form.addEventListener("submit", function (event) {
            event.preventDefault();
            const formData = new URLSearchParams(new FormData(form)).toString();
            fetch('/AdminBeceriler/Guncelle', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: formData
            })
            .then(response => response.json())
            .then(data => {
                if (data.success && data.redirectUrl) {
                    window.location.href = data.redirectUrl;
                } else if (data.errors) {
                    if (data.errors.SkillName) document.getElementById("SkillNameError").innerText = data.errors.SkillName;
                    if (data.errors.SkillPercent) document.getElementById("SkillPercentError").innerText = data.errors.SkillPercent;
                    if (data.errors.Skillcon) document.getElementById("SkillIconError").innerText = data.errors.Skillcon;
                } else {
                    document.getElementById("resultsucc").innerHTML = '<div class="alert alert-danger">Beklenmeyen bir hata oluştu.</div>';
                }
            })
            .catch(error => {
                console.error('Hata:', error);
                document.getElementById("resultsucc").innerHTML = '<div class="alert alert-danger">Bir hata oluştu. Lütfen tekrar deneyin.</div>';
            });
        });
    });
</script>