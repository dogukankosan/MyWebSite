@model AdminLoginProp
@{
    ViewData["Title"] = "Admin Giriş Güncelleme Sayfası";
    Layout = "~/Views/Shared/_adminLayout.cshtml";
}
<form method="post" asp-controller="AdminKullanici" asp-action="Guncelle">
    <br />
    <h4>Admin Giriş Güncelleme Sayfası</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    <input type="hidden" asp-for="ExistingPasswordHash" />
    <div class="form-group">
        <label asp-for="UserName">Kullanıcı Adı</label>
        <input asp-for="UserName" class="form-control"
               required minlength="3" maxlength="50"
               pattern="^[a-zA-Z0-9_.-]+$"
               title="Sadece harf, rakam, nokta, alt çizgi ve tire içerebilir." />
        <span asp-validation-for="UserName" class="text-danger" style="margin-top: 5px; display: block;"></span>
    </div>
    <br />
    <div class="form-group">
        <label asp-for="Password">Şifre (değiştirmek isterseniz doldurun):</label>
        <div class="input-group">
            <input asp-for="Password" class="form-control"
                   minlength="8" maxlength="150"
                   pattern="^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[^a-zA-Z0-9]).{8,}$"
                   title="En az 1 büyük harf, 1 küçük harf, 1 rakam ve 1 özel karakter içermelidir." />
            <button type="button" class="btn btn-outline-secondary" id="togglePassword">
                <i class="fa fa-eye" id="toggleIcon"></i>
            </button>
        </div>
        <span asp-validation-for="Password" class="text-danger" style="margin-top: 5px; display: block;"></span>
    </div>
    <br />
    <button type="submit" class="btn btn-success">Güncelle</button>
</form>
<br/>

@using System.Text.Json
<script>
    document.addEventListener('DOMContentLoaded', function () {
      const pwdInput =
        document.querySelector('input#Password') ||
        document.querySelector('input[name="Password"]') ||
        document.querySelector('input[id$="_Password"]') ||
        document.querySelector('input[name$=".Password"]');

      const toggleBtn  = document.getElementById('togglePassword');
      const toggleIcon = document.getElementById('toggleIcon');

      if (toggleBtn && toggleIcon && pwdInput) {
        toggleBtn.addEventListener('click', function (e) {
          e.preventDefault();
          const isPassword = pwdInput.getAttribute('type') === 'password';
          pwdInput.setAttribute('type', isPassword ? 'text' : 'password');
          toggleIcon.classList.remove('fa-eye', 'fa-eye-slash');
          toggleIcon.classList.add(isPassword ? 'fa-eye-slash' : 'fa-eye');
        });
      }

      const shouldLogout = @Html.Raw(JsonSerializer.Serialize(ViewBag.LogoutAfter ?? false));
      const type         = @Html.Raw(JsonSerializer.Serialize(TempData["Type"] ?? ""));
      const message      = @Html.Raw(JsonSerializer.Serialize(TempData["Message"] ?? ""));
      const logoutUrl    = @Html.Raw(JsonSerializer.Serialize(
                                                        ViewBag.LogoutUrl ?? Url.Action("Cikis", "AdminUserLogin",
                                                            new { returnUrl = Url.Action("Panel", "AdminGiris") })));
      if (shouldLogout) {
        if (typeof Swal !== 'undefined') {
          Swal.fire({
            icon: (type === 'success') ? 'success' : 'info',
            title: (type === 'success') ? 'Güncelleme Başarılı' : 'Bilgi',
            text: message || '5 saniye sonra oturum kapatılacak.',
            timer: 5000,
            timerProgressBar: true,
            showConfirmButton: false,
            allowOutsideClick: false,
            allowEscapeKey: false
          });
        }
        setTimeout(function () {
          window.location.href = logoutUrl;  
        }, 5000);
      }
    });
</script>